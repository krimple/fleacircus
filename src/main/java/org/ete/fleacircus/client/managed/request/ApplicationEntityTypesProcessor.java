// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package org.ete.fleacircus.client.managed.request;

import com.google.gwt.requestfactory.shared.EntityProxy;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public abstract class ApplicationEntityTypesProcessor<T> {

    private final T defaultValue;

    private T result;

    public ApplicationEntityTypesProcessor() {
        defaultValue = null;
    }

    public ApplicationEntityTypesProcessor(T defaultValue) {
        this.defaultValue = defaultValue;
    }

    public static Set<java.lang.Class<? extends com.google.gwt.requestfactory.shared.EntityProxy>> getAll() {
        Set<Class<? extends EntityProxy>> rtn = new HashSet<Class<? extends EntityProxy>>();
        rtn.add(SpecialtyProxy.class);
        rtn.add(FleaProxy.class);
        rtn.add(EventProxy.class);
        return Collections.unmodifiableSet(rtn);
    }

    private static void process(org.ete.fleacircus.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Class<?> clazz) {
        if (SpecialtyProxy.class.equals(clazz)) {
            processor.handleSpecialty((SpecialtyProxy) null);
            return;
        }
        if (FleaProxy.class.equals(clazz)) {
            processor.handleFlea((FleaProxy) null);
            return;
        }
        if (EventProxy.class.equals(clazz)) {
            processor.handleEvent((EventProxy) null);
            return;
        }
        processor.handleNonProxy(null);
    }

    private static void process(org.ete.fleacircus.client.managed.request.ApplicationEntityTypesProcessor<?> processor, Object proxy) {
        if (proxy instanceof SpecialtyProxy) {
            processor.handleSpecialty((SpecialtyProxy) proxy);
            return;
        }
        if (proxy instanceof FleaProxy) {
            processor.handleFlea((FleaProxy) proxy);
            return;
        }
        if (proxy instanceof EventProxy) {
            processor.handleEvent((EventProxy) proxy);
            return;
        }
        processor.handleNonProxy(proxy);
    }

    public void handleNonProxy(Object object) {
    }

    public abstract void handleSpecialty(SpecialtyProxy proxy);

    public abstract void handleFlea(FleaProxy proxy);

    public abstract void handleEvent(EventProxy proxy);

    public T process(Class<?> clazz) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, clazz);
        return result;
    }

    public T process(Object proxy) {
        setResult(defaultValue);
        ApplicationEntityTypesProcessor.process(this, proxy);
        return result;
    }

    protected void setResult(T result) {
        this.result = result;
    }
}
