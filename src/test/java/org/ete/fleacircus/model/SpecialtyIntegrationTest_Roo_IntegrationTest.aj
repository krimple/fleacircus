// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.ete.fleacircus.model;

import org.ete.fleacircus.model.SpecialtyDataOnDemand;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;

privileged aspect SpecialtyIntegrationTest_Roo_IntegrationTest {
    
    declare @type: SpecialtyIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: SpecialtyIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext.xml");
    
    declare @type: SpecialtyIntegrationTest: @Transactional;
    
    @Autowired
    private SpecialtyDataOnDemand SpecialtyIntegrationTest.dod;
    
    @Test
    public void SpecialtyIntegrationTest.testFindSpecialty() {
        org.ete.fleacircus.model.Specialty obj = dod.getRandomSpecialty();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to initialize correctly", obj);
        java.lang.Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to provide an identifier", id);
        obj = org.ete.fleacircus.model.Specialty.findSpecialty(id);
        org.junit.Assert.assertNotNull("Find method for 'Specialty' illegally returned null for id '" + id + "'", obj);
        org.junit.Assert.assertEquals("Find method for 'Specialty' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void SpecialtyIntegrationTest.testFlush() {
        org.ete.fleacircus.model.Specialty obj = dod.getRandomSpecialty();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to initialize correctly", obj);
        java.lang.Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to provide an identifier", id);
        obj = org.ete.fleacircus.model.Specialty.findSpecialty(id);
        org.junit.Assert.assertNotNull("Find method for 'Specialty' illegally returned null for id '" + id + "'", obj);
        boolean modified =  dod.modifySpecialty(obj);
        java.lang.Integer currentVersion = obj.getVersion();
        obj.flush();
        org.junit.Assert.assertTrue("Version for 'Specialty' failed to increment on flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void SpecialtyIntegrationTest.testMerge() {
        org.ete.fleacircus.model.Specialty obj = dod.getRandomSpecialty();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to initialize correctly", obj);
        java.lang.Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to provide an identifier", id);
        obj = org.ete.fleacircus.model.Specialty.findSpecialty(id);
        boolean modified =  dod.modifySpecialty(obj);
        java.lang.Integer currentVersion = obj.getVersion();
        org.ete.fleacircus.model.Specialty merged = (org.ete.fleacircus.model.Specialty) obj.merge();
        obj.flush();
        org.junit.Assert.assertEquals("Identifier of merged object not the same as identifier of original object", merged.getId(), id);
        org.junit.Assert.assertTrue("Version for 'Specialty' failed to increment on merge and flush directive", (currentVersion != null && obj.getVersion() > currentVersion) || !modified);
    }
    
    @Test
    public void SpecialtyIntegrationTest.testPersist() {
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to initialize correctly", dod.getRandomSpecialty());
        org.ete.fleacircus.model.Specialty obj = dod.getNewTransientSpecialty(Integer.MAX_VALUE);
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to provide a new transient entity", obj);
        org.junit.Assert.assertNull("Expected 'Specialty' identifier to be null", obj.getId());
        obj.persist();
        obj.flush();
        org.junit.Assert.assertNotNull("Expected 'Specialty' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void SpecialtyIntegrationTest.testRemove() {
        org.ete.fleacircus.model.Specialty obj = dod.getRandomSpecialty();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to initialize correctly", obj);
        java.lang.Long id = obj.getId();
        org.junit.Assert.assertNotNull("Data on demand for 'Specialty' failed to provide an identifier", id);
        obj = org.ete.fleacircus.model.Specialty.findSpecialty(id);
        obj.remove();
        obj.flush();
        org.junit.Assert.assertNull("Failed to remove 'Specialty' with identifier '" + id + "'", org.ete.fleacircus.model.Specialty.findSpecialty(id));
    }
    
}
